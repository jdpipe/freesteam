#!@PYTHON@
from __future__ import print_function
from optparse import OptionParser
import sys, platform, os.path

#---------------------
# This file is generated automatically by SCons and installed in at INSTALL_BIN.
# Use it to query for local configuration of FREESTEAM on your system for example
# when building external 'plugins' such as external computations and external
# solvers etc.
#
# It's written in python since (because of SCons) we know we have Python on 
# this system already but we don't know that about unix shell (eg on Windows).
#
# Note that SCons supports reading of the output from this script, using
# features offered since version 0.96.91, although this functionality
# has at times been problematic on the Windows platform, and/or when paths
# contain spaces.
#
# This file inspired by other software that uses the same approach, eg
# ginac-config, xft-config, cppunit-config.
#
# Type freesteam-config --help for usage.
#---------------------

# platform specific name munging for '-L' and '-I' file paths...
munge = lambda s: s

if 0:
	# previously, we installed freesteam using a Windows installer.
	# however, for now, we don't do that, and the main thing is to make sure
	# that this script works within the MSYS2 context. So disable the winreg stuff for now...
	
	# having said that, it would still useful to use 'cygpath' to get MSYS2 paths instead of native Windows ones.
	
	#if platform.system()=="Windows":
	import winreg
	x=winreg.ConnectRegistry(None,winreg.HKEY_LOCAL_MACHINE)
	y= winreg.OpenKey(x,r"SOFTWARE\FREESTEAM")
	BIN,t = winreg.QueryValueEx(y,"Install_Dir")	
	winreg.CloseKey(y)
	winreg.CloseKey(x)

	LIB = os.path.join(BIN,"lib")
	INCLUDE = os.path.join(BIN,"include")
	
	try:
		# if we have access to GetShortPathName, we'll use it...
		import win32api
		def munge1(s):
			s1 = s
			try:
				# we can only munge the path if it actually exists
				s1 = win32api.GetShortPathName(s)
				s1 = s1.replace("\\","\\\\")
			except:
				# if it doesn't exist, we just return the un-munged path
				pass
			return s1
		munge = munge1 
	except:
		pass		
else:
	# If we're not in Windows, use the original values passed to us from SCons:
	LIB="@INSTALL_LIB@"
	BIN="@INSTALL_BIN@"
	INCLUDE="@INSTALL_INCLUDE@"
	PYTHON="@INSTALL_PYTHON@"

usage = "usage: %prog [--help,...]"
# the rest of this script is about returning those values in the standard way
parser = OptionParser(usage=usage, version="@VERSION@")

parser.add_option("--libs", action="store_true", help="show linker flags (for freesteam libraries)")
parser.add_option("--cppflags", action="store_true", help="show C pre-processor flags (for freesteam header files)")
parser.add_option("--python", action="store_true", help="show where Python library was installed (if installed)")

(options, args) = parser.parse_args()

ok = False

if options.cppflags:
	include = ""
	if INCLUDE!="/usr/include":
		include=INCLUDE
	if -1!=include.find(" "):
		sys.stdout.write(" -I"+munge(include)+"")
	elif len(include):
		sys.stdout.write(" -I"+include)
	ok = True

if options.libs:
	libs = ""
	if LIB!="/usr/lib":
		libs = LIB
	if -1!=libs.find(" "):
		sys.stdout.write(" -L"+munge(libs)+" -lfreesteam")
	else:
		Lflag  = " "
		if len(libs):
			Lflag = " -L"+libs+" "
		sys.stdout.write(Lflag + "-lfreesteam")
	ok = True

if options.python:
	sys.stdout.write(" "+PYTHON)
	ok = True

if ok:
	sys.stdout.write("\n")

if not ok:
	sys.stderr.write("invalid option '%s' (use --help for more info)\n" % args)
	sys.exit(1)

