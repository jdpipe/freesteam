#* 
	Rankine Cycle

	Note the method of connecting the cycle end back to the start. 
	Because of uniform flow through all components, mass flow must not be connected back to the start, else a singular Jacobian is formed.
	
	John Pye 2005 http://freesteam.sf.net
*#

using "streams";
using "turbine";
using "boiler";
using "pump";
using "condenser";
using "throttle";

#*
	Very simple model for the Rankine cycle:
	No constraint on outlet state==inlet state here
	No energy balance
*#
Model Rankine1
	
    VARIABLES
	S1 as Stream_pT;
    BO	as Boiler_pT;
	TU	as Turbine_ideal;
	CO	as Condenser;
	PU 	as PumpSimple;
	
	CONNECTIONS
	S1 to BO.In;
	BO.Out	to	TU.In;
	TU.Out	to  CO.In;
	CO.Out	to  PU.In;
		
end

Model Rankine2
	
    VARIABLES
	S1 as Stream_pT;
    BO	as Boiler_pT;
	TU	as Turbine;
	CO	as Condenser;
	PU 	as PumpSimple;
	
	CONNECTIONS
	S1 to BO.In;
	BO.Out	to	TU.In;
	TU.Out	to  CO.In;
	CO.Out	to  PU.In;
		
end

Model Rankine3
	
	VARIABLES
	S1 as Stream_pT;
	BO as BoilerWithLoss;
	TU as Turbine;
	CO as Condenser;
	PU as PumpSimple;
	
	CONNECTIONS
	S1 to BO.In;
	BO.Out to TU.In;
	TU.Out to CO.In;
	CO.Out to PU.In;

end

Model Rankine4
	
	VARIABLES
	S1 as Stream_pT;
	BO as BoilerWithLoss;
	TU as Turbine;
	CO as CondenserWithLoss;
	PU as PumpSimple;
	
	CONNECTIONS
	S1 to BO.In;
	BO.Out to TU.In;
	TU.Out to CO.In;
	CO.Out to PU.In;

end

Model RankineClosedLoop
	
	VARIABLES
	mdot as MassFlowRate;
	
    BO	as BoilerWithLoss;
	TU	as Turbine;
	CO	as Condenser;
	PU 	as PumpSimple;
	
	CONNECTIONS
	BO.Out	to	TU.In;
	TU.Out	to  CO.In;
	CO.Out	to  PU.In;
	
	SPECIFY
	BO.In.mdot = mdot;
	
	PU.Out.p = BO.In.p;
	PU.Out.h = BO.In.h;
	# PU.Out.mdot = BO.In.mdot; # <-- this is redundant since all the mass flows are already equated!
	
	[BO.In.T, BO.In.s]=BO.In.freesteam.Ts_ph(BO.In.p,BO.In.h);

	#"System-wide energy conservation"
	BO.Qdot + CO.Qdot =  PU.Wdot + TU.Wdot;
	
end
