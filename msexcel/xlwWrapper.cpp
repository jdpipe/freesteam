//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include <xlw/MyContainers.h>
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <ctime>
namespace {
const char* LibraryName = "Freesteam2.x";
};

// dummy function to force linkage
namespace {
void DummyFunction()
{
xlAutoOpen();
xlAutoClose();
}
}

// registrations start here


namespace
{
XLRegistration::Arg
fstm_h_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_h_pT("xlfstm_h_pT",
"fstm_h_pT",
"Enthalpy (kJ/kg) ",
LibraryName,
fstm_h_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_h_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_h_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_s_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_s_pT("xlfstm_s_pT",
"fstm_s_pT",
"Entropy (kJ/kg.K) ",
LibraryName,
fstm_s_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_s_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_s_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_cp_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_cp_pT("xlfstm_cp_pT",
"fstm_cp_pT",
"Isobaric heat capacity (kJ/kg.K) ",
LibraryName,
fstm_cp_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_cp_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_cp_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_cv_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_cv_pT("xlfstm_cv_pT",
"fstm_cv_pT",
"Isochoric heat capacity (kJ/kg.K) ",
LibraryName,
fstm_cv_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_cv_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_cv_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_v_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_v_pT("xlfstm_v_pT",
"fstm_v_pT",
"Specific volume (m3/kg) ",
LibraryName,
fstm_v_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_v_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_v_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_rho_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_rho_pT("xlfstm_rho_pT",
"fstm_rho_pT",
"Density (kg/m3) ",
LibraryName,
fstm_rho_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_rho_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_rho_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_u_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_u_pT("xlfstm_u_pT",
"fstm_u_pT",
"Internal energy (kJ/kg) ",
LibraryName,
fstm_u_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_u_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_u_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_k_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_k_pT("xlfstm_k_pT",
"fstm_k_pT",
"Thermal conductivity (W/m.K) ",
LibraryName,
fstm_k_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_k_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_k_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_mu_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_mu_pT("xlfstm_mu_pT",
"fstm_mu_pT",
"Dynamic viscosity (Pa.s) ",
LibraryName,
fstm_mu_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_mu_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_mu_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_w_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_w_pT("xlfstm_w_pT",
"fstm_w_pT",
"Speed of sound (m/s) ",
LibraryName,
fstm_w_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_w_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_w_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_region_pTArgs[]=
{
{ "Pressure","0 bar <= Pressure <= 1000 bar ","B"},
{ "Temperature","0 C <= Temperature <= 800 C ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_region_pT("xlfstm_region_pT",
"fstm_region_pT",
"Region of IAPWS-IF97 ",
LibraryName,
fstm_region_pTArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_region_pT(
double Pressure,
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



short result(
	fstm_region_pT(
		Pressure,
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_Tsat_pArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_Tsat_p("xlfstm_Tsat_p",
"fstm_Tsat_p",
"Saturation temperature ( C) ",
LibraryName,
fstm_Tsat_pArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_Tsat_p(
double Pressure)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_Tsat_p(
		Pressure)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_psat_TArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_psat_T("xlfstm_psat_T",
"fstm_psat_T",
"Saturation pressure (bar) ",
LibraryName,
fstm_psat_TArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_psat_T(
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_psat_T(
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_hf_TArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_hf_T("xlfstm_hf_T",
"fstm_hf_T",
"Liquid Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_hf_TArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_hf_T(
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_hf_T(
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_hg_TArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_hg_T("xlfstm_hg_T",
"fstm_hg_T",
"Vapour Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_hg_TArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_hg_T(
double Temperature)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_hg_T(
		Temperature)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_hf_pArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_hf_p("xlfstm_hf_p",
"fstm_hf_p",
"Liquid Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_hf_pArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_hf_p(
double Pressure)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_hf_p(
		Pressure)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_hg_pArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_hg_p("xlfstm_hg_p",
"fstm_hg_p",
"Vapour Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_hg_pArgs,
1
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_hg_p(
double Pressure)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	fstm_hg_p(
		Pressure)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_h_pxArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"},
{ "x","Steam Quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_h_px("xlfstm_h_px",
"fstm_h_px",
"Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_h_pxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_h_px(
double Pressure,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_h_px(
		Pressure,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_h_TxArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"},
{ "x","Steam Quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_h_Tx("xlfstm_h_Tx",
"fstm_h_Tx",
"Enthalpy at saturation (kJ/kg) ",
LibraryName,
fstm_h_TxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_h_Tx(
double Temperature,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_h_Tx(
		Temperature,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_u_pxArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"},
{ "x","Steam quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_u_px("xlfstm_u_px",
"fstm_u_px",
"Internal energy at saturation (kJ/kg) ",
LibraryName,
fstm_u_pxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_u_px(
double Pressure,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_u_px(
		Pressure,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_u_TxArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"},
{ "x","Steam quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_u_Tx("xlfstm_u_Tx",
"fstm_u_Tx",
"Internal energy at saturation (kJ/kg) ",
LibraryName,
fstm_u_TxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_u_Tx(
double Temperature,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_u_Tx(
		Temperature,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_v_pxArgs[]=
{
{ "Pressure","0 bar <= Pressure <= Pcrit(220.64 bar) ","B"},
{ "x","Steam quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_v_px("xlfstm_v_px",
"fstm_v_px",
"Specific volume at saturation (m3/kg) ",
LibraryName,
fstm_v_pxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_v_px(
double Pressure,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_v_px(
		Pressure,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
fstm_v_TxArgs[]=
{
{ "Temperature","0 C <= Temperature <= Tcrit(373.946 C) ","B"},
{ "x","Steam quality (kg/kg), 0 <= x <= 1 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerfstm_v_Tx("xlfstm_v_Tx",
"fstm_v_Tx",
"Specific volume at saturation (m3/kg) ",
LibraryName,
fstm_v_TxArgs,
2
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlfstm_v_Tx(
double Temperature,
double x)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	fstm_v_Tx(
		Temperature,
		x)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

