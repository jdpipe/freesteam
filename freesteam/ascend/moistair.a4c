(*	freesteam
	Copyright (C) John Pye 2007

 	This program is free software; you can redistribute it
	and/or modify it under the terms of the GNU General Public
	License as published by the Free Software Foundation; either
	version 2 of the License, or (at your option) any later
	version.

	This program is distributed in the hope that it will be
	useful, but WITHOUT ANY WARRANTY; without even the implied
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	PURPOSE.  See the GNU General Public License for more
	details.

	You should have received a copy of the GNU General Public
	License along with this program; if not, write to the Free
	Software Foundation, Inc., 59 Temple Place, Suite 330,
	Boston, MA 02111-1307  USA
*)
REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";
REQUIRE "iapwssatprops.a4c";
REQUIRE "johnpye/airprops.a4c";

(*
	MOIST AIR PROPERTIES

	This model can be used with ASCEND to calculate moist air properties
	in a similar way to that employed with a psychrometric or Mollier diagram.

	It has been tested for specified property combinations
		(m,omega,p,T)
		(m,phi,p,T)
		(m_a,omega,p,T)
	and may work for some other property combinations too.

	The model includes an accurate air properties formulation by Adebiyi
	as given in the model file johnpye/airprops.a4c in the ASCEND Model
	Library.

	For water properties, we use the usual assumption of h_v ~= h_g(T). h_g
	is calculated using the IAPWS release on saturated water properties,	
	which is availabe in the ASCEND model iapwssatprops that is part of the
	freesteam source code.

	Ideal gas assumptions are made to allow partial pressures to be calculated
	from omega or phi.
*)

MODEL moistair;
	
	p IS_A pressure;
	T IS_A temperature; (* dry bulb temperature *)

	(* mass of air, mass of water *)
	m IS_A mass;
	m_a, m_v IS_A mass;
	m = m_a + m_v;

	(*
		Approximate water vapour enthalpy by saturated gas at temperature T.
		(this is a good assumption for temperatures 20 to 100 °C)
	*)
	sat_vap IS_A iapwssatprops; (* look up saturation properties *)
	sat_vap.T, T ARE_THE_SAME;
	p_g ALIASES sat_vap.p;
	h_g ALIASES sat_vap.h_g;
	h_v IS_A specific_enthalpy;
	h_v = h_g;

	(* 
		Air properties: use the Adebiyi correlation for air enthalpy
		at the partial pressure p_a and temperature T. Also calculate
		the specific volume using the equation of state (which will be
		fairly accurate, ±0.52% as I recall).
	*)
	air IS_A airprops;
	h_a ALIASES air.h; (* h_a will be calculated for (p_a, T) *)
	p_a ALIASES air.p; (* still need to guess the value for this *)
	v_a ALIASES air.v;
	T, air.T ARE_THE_SAME;

	(* dew point *)
	dew_point IS_A iapwssatprops; (* look up saturation properties *)
	p_v ALIASES dew_point.p;
	T_d ALIASES dew_point.T;

	(* sum of partial pressures *)
	p = p_a + p_v;

	(* 
		For the relative humidity, we use the assumption that
		the two gases are idea, so mole fractions are proportional
		to partial pressures.
	*)
	phi IS_A fraction;
	phi * p_g = p_v;

	omega IS_A factor; (* humidity ratio *)
	omega * m_a = m_v;

	(*
		Apply the ideal gas assumption to the calculation of the
		humidity ratio as well. This *)
	p_v * (omega + 0.622) = omega * p;

	h IS_A specific_enthalpy;
	m*h = m_a * h_a + m_v * h_v;
	
	(* specific volume *)
	v IS_A specific_volume;
	m * v = m_a * v_a;

METHODS
	METHOD on_load;

		FIX T;
		T := 300 {K};

		FIX p;
		p := 1 {atm};

		FIX m, omega;
		m := 1 {kg};
		omega := 5 {g/kg};

		h_a.lower_bound := -1e50 {kJ/kg};
	END on_load;
END moistair;

(*
	The following model still needs to be tested. It doesn't converge for the 
	full range of values and probably contains errors.
*)
MODEL moistair_wetbulb REFINES moistair;

	(* adiabatic saturation temperature *)
	adiab_sat IS_A iapwssatprops;
	omega_dash IS_A factor;
	T_as ALIASES adiab_sat.T;
	p_g_as ALIASES adiab_sat.p;
	omega_dash = 0.622 * p_g_as / (p - p_g_as);
	h_g_as ALIASES adiab_sat.h_g;
	h_f_as ALIASES adiab_sat.h_f;

	(* air properties: use the Adebiyi correlation for air enthalpy *)
	air_as IS_A airprops;
	h_a_as ALIASES air_as.h; (* h_a will be calculated for (p_a, T) *)
	air_as.p, p ARE_THE_SAME; (* still need to guess the value for this *)
	air_as.T, T_as ARE_THE_SAME;


	(* adiabatic saturator for web-bulb temperature calculation [eq 12.52] *)
	omega * (h_g - h_f_as) = h_a_as - h_a + omega_dash * (h_g_as - h_f_as);

END moistair_wetbulb;

