import SCons.Warnings, os, sys, platform

SCons.Warnings.suppressWarningClass(SCons.Warnings.VisualCMissingWarning)

env = Environment(
	ENV={"PATH":os.environ['PATH']}
	, tools=['mingw']
)
env['ENV']['TMP'] = os.environ['TMP']
env['XLW'] = "#/xlw"

print "XLW =",env['XLW']

XLL64 = False
libxlw_path = "$XLW/lib"
libxlw_name = 'xlw'
if XLL64:
	libxlw_path = "$XLW/lib/x64"

env.Append(
	CPPPATH=["$XLW/include",".."]
	,LIBPATH=[libxlw_path]
	,LINKFLAGS=['-shared','-static','-s','-static-libgcc','-static-libstdc++']
	,LIBS=['user32']
)

conf = env.Configure()
if not conf.CheckCXXHeader('xlw/xlw.h'):
	print 'ERROR: xlw/xlw.h not found, XLL interface will not be compiled.'
	Exit(1)
if not conf.CheckLib(libxlw_name):
	print 'ERROR:',libxlw_name,'not found, XLL interface will not be compiled.'
	Exit(1)

hasXlw = False
env = conf.Finish()

env['SHLIBSUFFIX'] = ".xll"
env['SHLIBPREFIX'] = ""

env.Command('xlwWrapper.cpp','cppinterface.h',"xlw\\xlw_ifgen.exe $SOURCE $TARGET")

env1 = env.Clone()

env1.AppendUnique(
	LIBPATH=["../lib"]
	,LIBS=['freesteam']
)

fssrcs = env1.Glob("fstm_*.cpp") + ['xlwWrapper.cpp']
env1.SharedLibrary("freesteam",fssrcs)

