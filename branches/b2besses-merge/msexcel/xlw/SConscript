Import('env')
import os, sys, platform

libxlw_env = env.Clone()
ifgen_env = env.Clone()

srcs = libxlw_env.Glob("src/*.cpp")

libxlw_env.Append(
	CPPPATH="./include"
	,LINKFLAGS=['-static-libgcc','-static-libstdc++']
)

libxlw_env.StaticLibrary("lib/xlw",srcs)

ifsrcs = ifgen_env.Glob("ifgen/*.cpp")

ifgen_env.Append(
	CPPPATH="./include"
)

ifgen_tool = ifgen_env.Program("xlw_ifgen",ifsrcs)

# This emitter will be used later by a Builder, and has an explcit dependency on the mk_vds tool
def ifgen_emitter(target, source, env):
    env.Depends(target, ifgen_tool)
    return (target, source)

# Create a builder (that uses the emitter) to build .vds files from .txt files
# The use of abspath is so that mk_vds's directory doesn't have to be added to the shell path.
bld = Builder(action = ifgen_tool[0].abspath + ' $SOURCE $TARGET',
	      emitter = ifgen_emitter,
	      prefix = 'xlw', suffix = '.cpp')

# Add the new Builder to the list of builders
env['BUILDERS']['XlwWrapper'] = bld

