REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";
REQUIRE "iapwssatprops.a4c";
REQUIRE "johnpye/airprops.a4c";

(*
	Moist air calculator.

	This model relates the various properties of moist air in such a
	way that you can use it in place of a pyschrometric diagram.

	We use the IAPWS saturation properties curve for the water saturation
	pressure.

	THIS IS STILL UNDER DEVELOPMENT. DON'T TRUST ANYTHING YOU SEE HERE.
*)

MODEL moistair;
	
	p IS_A pressure;
	T IS_A temperature; (* dry bulb temperature *)

	(* mass of air, mass of water *)
	m IS_A mass;
	m_a, m_v IS_A mass;
	m = m_a + m_v;

	(* 
		Approximate water vapour by saturated gas at temperature T.
		(this is a good assumption for temperatures 20 to 100 Â°C)
	*)
	sat_vap IS_A iapwssatprops; (* look up saturation properties *)
	sat_vap.T, T ARE_THE_SAME;
	p_g ALIASES sat_vap.p;
	h_g ALIASES sat_vap.h_g;
	h_v = h_g;

	(* air properties: use the Adebiyi correlation for air enthalpy *)
	air IS_A airprops;
	h_a ALIASES air.h; (* h_a will be calculated for (p_a, T) *)
	p_a ALIASES air.p; (* still need to guess the value for this *)
	T, air.T ARE_THE_SAME;

	(* dew point *)
	dew_point IS_A iapwssatprops; (* look up saturation properties *)
	p_v ALIASES dew_point.p;

	(* sum of partial pressures *)
	p_a + p_v = p;

	(* air as an ideal gas *)
	V IS_A volume;
	n_a * M_a = m_a;
	p_a * V = n_a * 1{GAS_C} * T;

	(* relative humidity *)
	phi IS_A fraction;
	phi = p_v / p_g;

	(* humidity ratio calculated from partial pressure *)
	omega IS_A factor;

	(* humidity ratio from partial pressure *)
	omega = m_v / m_a;

	(* given relative humidity and temperature, we have p_g and hence p_v *)

	(* adiabatic saturation temperature *)
	adiab_sat IS_A iapwssatprops;
	omega_dash IS_A factor;
	T_as ALIASES adiab_sat.T;
	p_g_as ALIASES adiab_sat.p;
	omega_dash = 0.622 * p_g_as / (p - p_g_as);
	h_g_as ALIASES adiab_sat.h_g;
	h_f_as ALIASES adiab_sat_h_f;

	(* adiabatic saturator for web-bulb temperature calculation [eq 12.52] *)
	omega * (h_g - h_f_as) = h_a_as - h_a + omega_dash * (h_g_as - h_f_as)

	(* given p_v we can calculate all the other properties of the vapour *)


	(* given p, we then have p_a and, m_a given V, or V given m_a *)
	v_v IS_A specific_volume;
	V = v_v * m_v;


	phi IS_A fraction; (* relative humidity *)


	(* volume of container *)
	V IS_A volume;

	omega IS_A factor; (* humidity ratio *)
	omega * m_a = m_w;

	
	(* dew point saturation properties *)
	dew_point IS_A iapwssatprops;
	T_dp ALIASES dew_point.T;
	p_dp ALIASES sat_water.p;

	(* air is treated as an idea gas *)
	p_a IS_A pressure;
	n_a IS_A mole;
	p_a * V = n_a * 1{GAS_C} * T;
	n_a * M_a = m_a;

	(* partial pressure assuming idea gas behaviour *)
	p = p_a + p_w;

	(* enthalpy of the mixture *)
	H IS_A energy;
	h, h_a, h_w IS_A specific_enthalpy;
	m*h = m_a*h_a + m_w*h_w;

	(* enthalpy of air *)
	h_a = 1.006 {kJ/kg/K} * (T - T_ref);
	T_ref IS_A temperature;

	(* vapour pressure for water *)
	p_w, sat_water.p ARE_THE_SAME;

	phi * p_w = p_dp; (* don't think this is right... *)

METHODS
	METHOD on_load;
		FIX M_a, cp_a, T_ref_a;
		M_a := 28.97 {g/mol};

		FIX T, T_ref;
		T := 300 {K};
		T_ref := 273.15 {K}; (* arbitrarily chosen *)


		FIX V;
		V := 10 {m^3};

		FIX h;
		h := 2000 {kJ/kg};

		FIX m_a, omega;
		m_a := 10 {kg};
		omega := 0.001;
	END on_load;
END moistair;

			
		
