#include "../steamcalculator.h"
#include <stdexcept>
#include "gridtest.h"

#include <sstream>
#include <iostream>
#include <iomanip>
using namespace std;

class ConductivityTest : public GridTest<Pressure,Temperature,ThermalConductivity>{

	private:

		SteamCalculator *S;
		ThermalConductivity tol;

		void testOnePoint(Pressure& p,Temperature& T, ThermalConductivity& k){

			S->set_pT(p,T);

			cerr.flags(ios_base::showbase);
			//cerr << "Calculating conductivity at p = " << (p/MPa) << " MPa, T = " << T << endl;
			if(!eq(S->conductivity(),k,tol)){

				stringstream s;
				s<< "Conductivity with p = " << p/MPa << " MPa, T = " << tocelsius(T) << "Â°C: expected " << k/(Watt/metre/Kelvin) << " W/mK, got " << S->conductivity() /(Watt/metre/Kelvin) << ".";

				CPPUNIT_FAIL(s.str());
			}
		}

	public:

		void setUp(){

			tol = 0.05 * mW_mK;

			const int P_COUNT=29;
			const int T_COUNT=22;

			const double p_raw[P_COUNT]={0.1, 0.5, 1, 2.5, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.5, 25, 27.5, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100};

			const double T_raw[T_COUNT]={0, 25, 50, 75, 100, 150, 200, 250, 300, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 750, 800};

			const double k[T_COUNT][P_COUNT]={
{562,562.3,562.6,563.4,564.9,566.4,567.8,569.3,570.8,572.2,573.6,575.1,576.5,577.9,579.3,582.1,584.9,587.6,590.3,593,595.7,598.3,600.9,603.5,606.1,608.6,611.1,613.6,616}
,{607.5,607.7,608,608.8,610.1,611.4,612.7,614.1,615.4,616.7,617.9,619.2,620.5,621.8,623.1,625.6,628.1,630.6,633,635.5,637.9,640.3,642.6,645,647.3,649.6,651.4,654.2,656.4}
,{640.5,640.7,641,641.7,643,644.3,645.6,646.9,648.1,649.4,650.6,651.9,653.1,654.4,655.6,658,660.4,662.8,665.2,667.6,669.9,672.2,674.5,676.8,679,681.3,683.5,685.7,687.8}
,{663.5,663.7,663.9,664.7,666,667.4,668.6,669.9,671.2,672.5,673.8,675,676.3,677.5,678.8,681.3,683.7,686.1,688.5,690.9,693.2,695.6,697.9,700.2,702.4,704.7,706.9,709.1,711.3}
,{24.8,678,678.3,679.1,680.5,681.9,683.2,684.6,685.9,687.3,688.6,689.9,691.2,692.5,693.8,696.4,699,701.5,704,706.5,708.9,711.3,713.7,716,718.4,720.7,723,725.2,727.5}
,{28.8,683.9,684.2,685.2,686.9,688.5,690.2,691.8,693.4,695,696.5,698.1,699.6,701.2,702.7,705.7,708.6,711.6,714.4,717.3,720,722.8,725.5,728.2,730.8,733.4,736,738.5,741}
,{33.4,34.2,36.1,664.2,666.4,668.6,670.7,672.8,674.9,676.9,678.9,680.9,682.9,684.8,686.7,690.5,644.2,697.8,701.3,704.8,708.1,711.5,714.7,717.9,721.1,724.2,727.2,730.2,733.2}
,{38.3,38.8,39.7,43.9,619.1,622.3,625.5,628.5,631.5,634.4,637.2,640,642.7,645.4,648,653.2,658.1,662.9,667.5,672,676.4,680.6,684.8,688.8,692.8,696.6,700.4,704.1,707.7}
,{43.5,43.9,44.5,46.8,53,64,548.1,553.6,558.7,563.6,568.3,572.9,577.2,581.4,585.5,593.2,600.5,607.4,614,620.3,626.3,632.1,637.7,643,648.2,653.3,658.1,662.8,667.4}
,{49,49.3,49.8,51.5,552,60.6,68.5,81.1,104.1,441.9,454.1,464.7,474.1,482.7,490.6,504.7,517.3,528.7,539.1,548.7,557.7,566.1,574,581.5,588.7,595.5,602,608.3,614.3}
,{51.8,52.1,52.6,54.1,57.1,61.1,66.4,73.7,84.5,103.1,145.2,477.1,386.9,405.8,420.6,443.9,462.4,478.2,492,504.4,515.8,526.2,535.9,545,553.5,561.5,569.2,576.4,583.4}
,{54.7,55,55.4,56.8,59.5,62.9,67.2,72.8,79.9,89.6,103.4,124.2,160,232.4,328.1,373,398.5,419.9,438.3,454.4,468.8,481.8,493.7,504.7,514.9,524.5,533.5,542,550}
,{57.7,58,58.4,59.6,62.1,65.1,68.6,73,78.3,84.9,93.4,104.3,118.9,138.9,167.3,253.6,321.1,354.9,379.4,400,417.9,433.9,448.3,461.5,473.7,485,495.5,505.4,514.7}
,{60.7,61,61.4,62.5,64.8,67.5,70.6,74.2,78.5,83.6,89.8,97.2,106.3,117.5,131.5,170.8,225,277.9,315.7,343.1,365.2,384.3,401.3,416.8,430.9,443.9,456,467.3,477.9}
,{63.8,64,64.4,65.5,67.6,70.1,72.8,76,79.7,83.9,88.8,94.4,101.1,108.9,118,141.6,173.2,211.9,251.3,285.4,312.9,335.5,355.1,372.5,388.4,402.9,416.4,429,440.8}
,{66.9,67.2,67.5,68.6,70.6,72.8,75.3,78.2,81.4,85,89.1,93.7,99,105,111.9,128.5,149.7,175.7,205.5,236,264.6,289.8,311.7,330.9,348.2,363.9,378.5,392.1,404.8}
,{73.3,73.6,73.9,74.9,76.7,78.7,80.8,83.2,85.8,88.7,91.9,95.4,99.2,103.4,108,118.6,131.2,145.9,162.9,181.7,201.8,222.4,242.7,262,280.2,297.1,312.7,327.3,341}
,{79.9,80.1,80.4,81.4,83,84.8,86.8,88.9,91.1,93.6,96.2,99.1,102.1,105.4,109,116.9,125.4,136.2,147.7,160.3,174.1,188.7,203.8,219.2,234.6,249.6,264.2,278.3,291.7}
,{86.7,86.9,87.2,88,89.6,91.2,93,94.9,96.9,99.1,101.4,103.8,106.4,109.2,112.1,118.5,125.7,133.6,142.3,151.8,162.1,173,184.4,196.3,208.5,220.8,233.1,245.3,257.3}
,{93.6,93.8,94,94.9,96.3,97.8,99.5,101.2,103,105,107,109.2,111.5,113.9,116.4,121.8,127.8,134.3,141.4,149.1,157.2,165.9,175,184.5,194.3,204.3,214.5,224.7,235}
,{100.6,100.8,101,101.8,103.2,104.6,106.1,107.7,109.4,111.2,113,115,117,119.2,121.4,126.2,131.4,136.9,143,149.4,156.2,163.4,171,178.8,187,195.3,203.9,212.5,221.3}
,{107.7,107.9,108.2,108.9,110.2,111.5,113,114.4,116,117.6,114.3,121.1,123,124.9,126.9,131.2,135.8,140.7,145.9,151.5,157.4,163.6,170,176.7,183.7,190.8,198.2,205.6,213.2}
			};

			try{

				for(int i=0; i<T_COUNT; i++){
					addVector( fromcelsius(T_raw[i]), p_raw, MPa, k[i], mW_mK, P_COUNT);
				}

			}catch(std::exception &e){
				stringstream ss;
				ss << "ConductivityTest::setUp: " << e.what();
				CPPUNIT_FAIL(ss.str());
			}

			//cerr << "TABLE:" << endl;

			//printData();

			S = new SteamCalculator();

		}

		void tearDown(){

			delete S;

			GridTest<Pressure,Temperature,ThermalConductivity>::tearDown();
		}

	public:

		// Invoke CPPUNIT macros to add tests to a suite:

		CPPUNIT_TEST_SUITE(ConductivityTest);
		CPPUNIT_TEST(testAllPoints);
		CPPUNIT_TEST_SUITE_END();

};

CPPUNIT_TEST_SUITE_REGISTRATION(ConductivityTest);
