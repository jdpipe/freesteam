import os, commands, platform

#------------------------------------------------------
# OPTIONS

env = Environment(ENV=os.environ)

opts = Options(['options.cache', 'config.py'])

# Should exist in path
cppunit_config_command = 'cppunit-config --libs --cflags'

print "PLATFORM = ",platform.system()
can_install=True
if platform.system()=="Windows":
	default_emso_location = "c:\\Program Files\\EMSO\\interface"
	if os.getenv('MSYSTEM') or env.WhereIs('g++'):
		print "DETECTED MINGW: setting install locations under c:\\MinGW"
		default_libdir = 'c:\\MinGW\\lib'
		default_incdir = 'c:\\MinGW\\include'
		cppunit_config_command = 'sh cppunit-config --libs --cflags'
	else:
		if env.has_key('MSVS'):
			# for exception handling, following errmsg from VC6
			env.Append(CXXFLAGS=['/EHsc'])
			env.Append(CPPDEFINES='UNITS_CAST_THROW');
			print "VISUAL C++ detected... (Version",env['MSVS']['VERSION']+")"
		else:
			print "WARNING: non-POSIX tools"
		can_install=False
		env.Append(CPPPATH=os.environ['INCLUDE'])
else:
	default_emso_location = 'search'
	default_libdir = '/usr/local/lib'
	default_incdir = '/usr/local/include'

opts.Add(PackageOption('EMSO_INCDIR',"Location of EMSO 'interface' directory", default_emso_location))
opts.Add(BoolOption('HAVE_EMSO',"Build EMSO hook libraries", False))

if can_install:
	opts.Add(PathOption('LIBDIR',"Location to install library", default_libdir))
	opts.Add(PathOption('INCDIR',"Location to install headers", default_incdir))

opts.Add(BoolOption('ENABLE_SAT_P',"Enable saturation curves in terms of pressure"+
	"(introduces some numerical problems in iterative cases if"+
	"you're not careful)", False))

opts.Add(BoolOption('ENABLE_DEBUG_FLAG',"Add debug symbols to object code, for use with gdb etc", False))

opts.Update(env)

opts.Save('options.cache',env)

Help(opts.GenerateHelpText(env))

if env['ENABLE_SAT_P']:
	env.Append(CPPDEFINES=['ENABLE_SAT_P'])

if env['ENABLE_DEBUG_FLAG']:
	env.Append(CXXFLAGS=['-g'])
	env.Append(CFLAGS=['-g'])
	
#------------------------------------------------------
# ISNAN DETECTION

#- - - 8< - - -
checknansrc = """// Test for 'isnan'
#include <cmath>
#include <stdexcept>
#include <iostream>
using namespace std;

int main(void){
	int x= isnan(1);
	return 0;
}
#ifdef __MINGW32__
# error "MINGW32 isnan is no good for our purpose"
#endif

"""
#- - - 8< - - -

def CheckIsNan(context):
	context.Message( 'Checking for isnan...' )
	lastLIBS = context.env['LIBS']
	lastCPPFLAGS = context.env['CPPFLAGS']
	context.env.Append(LIBS = ['m'])
	tuple = context.TryRun(checknansrc,'.cpp')
	#print tuple
	if not tuple[0]:
		context.env.Replace(
			LIBS = lastLIBS
			, CPPFLAGS = lastCPPFLAGS
		)
		context.config_h = context.config_h +  "#undef HAVE_ISNAN\n"
	else:
		context.config_h = context.config_h +  "#define HAVE_ISNAN\n"

	context.Result(tuple[0])
	return tuple[0]

def CheckCppUnitConfig(context):
	context.Message( 'Checking cppunit-config...' )
	lastLIBS = context.env['LIBS']
	lastCPPFLAGS = context.env['CPPFLAGS']

#	for k in conf.env['ENV']:
#		print "ENV:",k,"=",env['ENV'][k]

	try:
		context.env.ParseConfig(cppunit_config_command)
	except IOError:
		context.env.Replace(
			LIBS = lastLIBS
			, CPPFLAGS = lastCPPFLAGS
		)
		context.Result(0)
		return 0
	except:
		context.env.Replace(
			LIBS = lastLIBS
			, CPPFLAGS = lastCPPFLAGS
		)
		context.Result(0)
		return 0
		
	context.config_h = context.config_h + "#define HAVE_CPPUNIT_CONFIG\n"
	context.Result(1)
	return 1

#----------------
# SWIG

import os,re

need_fortran = False

def get_swig_version(env):
	cmd = env['SWIG']+' -version'
	(cin,coutcerr) = os.popen4(cmd)
	output = coutcerr.read()
	
	restr = "SWIG\\s+Version\\s+(?P<maj>[0-9]+)\\.(?P<min>[0-9]+)\\.(?P<pat>[0-9]+)\\s*$"
	expr = re.compile(restr,re.M);
	m = expr.search(output);
	if not m:
		return None
	maj = int(m.group('maj'))
	min = int(m.group('min'))
	pat = int(m.group('pat'))

	return (maj,min,pat)
	

def CheckSwigVersion(context):
	
	try:
		context.Message("Checking version of SWIG... ")
		maj,min,pat = get_swig_version(context.env)
	except:
		context.Result("Failed to detect version, or failed to run SWIG")
		return 0;
	
	if maj == 1 and (
			min > 3
			or (min == 3 and pat >= 24)
		):
		context.Result("ok, %d.%d.%d" % (maj,min,pat))
		return 1;
	else:
		context.Result("too old, %d.%d.%d" % (maj,min,pat))
		return 0;

#------------------------------------------------------
# CONFIGURATION


conf = Configure(env
	, custom_tests = { 
		'CheckIsNan' : CheckIsNan
		,'CheckCppUnitConfig' : CheckCppUnitConfig
		,'CheckSwigVersion' : CheckSwigVersion
	} 
	, config_h = "config.h"
)

conf.env.Append(LIBS="")
conf.env.Append(CPPFLAGS="")

# Math library...

if not conf.CheckLibWithHeader(['m','c'], 'math.h', 'C'):
	print 'Did not find libm.a or m.lib, exiting!'
	Exit(1)

# IsNan

conf.CheckIsNan()
# CppUnit...

have_cppunit = False

if conf.CheckCppUnitConfig():
	if conf.CheckLibWithHeader("cppunit","cppunit/TestCase.h","C++"):
		#print "CPPUNIT OK!"
		have_cppunit=True

# Swig

have_swig = False
_swigv = conf.CheckSwigVersion()
if _swigv:
	have_swig = True

env = conf.Finish()

#------------------------------------------------------
# BUILD THE STATIC LIBRARY -- easy :-)


list = Split("""
	exception.cpp steamcalculator.cpp state.cpp region1.cpp region2.cpp 
	region3.cpp region4.cpp boundaries.cpp steamcalculatorexception.cpp zeroin.cpp 
	designbycontract.cpp units.cpp solver.cpp steamproperty.cpp satcurve.cpp b23curve.cpp 
	b13curve.cpp convergencetest.cpp solver2.cpp iapws95.cpp
""")

lib = env.Library('freesteam',list)

examplesrc = Split("example.cpp")

env.Program('example.cpp'
	, LIBS = ['freesteam']
	, LIBPATH='.'
)


#env.Program('testnan',['testnan.cpp']
#	, LIBS = 'm'
#	, CPPFLAGS = '-fsignaling-nans'
#)

#------------------------------------------------------
# SUBDIRECTORIES....

# Testing with CppUnit...

if have_cppunit:
	env.SConscript(['test/SConscript'],'env have_cppunit') #, 'cli/SConscript'
else:
	print "Skipping... Tests (no CppUnit found)"

# Compile-time C++ template testing

env.SConscript(['ctest/SConscript'],'env')

# Command-line-interface programs

env.SConscript(['cli/SConscript'],'env')

# EMSO hooks

if env['HAVE_EMSO']:
	env.SConscript(['emso/SConscript'],'env')
else:
	print "Skipping... EMSO hook libraries"

#------------------------------------------------------
# PYTHON INTERFACE :-)

if platform.system()=="Windows":
	python_lib = "python24"
else:
	python_lib = "python2.4"

import distutils.sysconfig

env.Append(PYTHON_LIBPATH=[distutils.sysconfig.PREFIX+"/libs"])
env.Append(PYTHON_CPPPATH=[distutils.sysconfig.get_python_inc()])

if have_swig:
	env.SharedLibrary('pyfreesteam',['freesteam.i']
		, SWIGFLAGS=['-python','-c++']
		, LIBS=['freesteam',python_lib]
		, LIBPATH=env['PYTHON_LIBPATH']
		, CPPPATH=env['PYTHON_CPPPATH']
		, SHLIBPREFIX='_'
	)

#------------------------------------------------------
# INSTALLATION

if can_install:
	install_lib = env.Install("$LIBDIR", lib)

	import glob
	files = glob.glob("*.h")
	#print files

	install_inc = env.Install("$INCDIR/freesteam", files)

	env.Alias('install',[install_lib, install_inc])
