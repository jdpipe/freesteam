import os, commands, platform

#------------------------------------------------------
# OPTIONS

env = Environment(ENV=os.environ)

opts = Options(['options.cache', 'config.py'])

if platform.system()=="Windows":
	env.Append(CPPPATH=['c:\\msys\\1.0\\include'])
	env.Append(LIBPATH=['c:\\msys\\1.0\\lib'])
	env.Append(PATH=['c:\\msys\\1.0\bin'])
	default_emso_location = "c:\\Program Files\\EMSO\\interface"
	default_libdir = 'c:\\msys\\1.0\\lib'
	default_incdir = 'c:\\msys\\1.0\\include'
else:
	default_emso_location = 'search'
	default_libdir = '/usr/local/lib'
	default_incdir = '/usr/local/include'



opts.Add(PackageOption('EMSO_INCDIR',"Location of EMSO 'interface' directory", default_emso_location))
opts.Add(BoolOption('HAVE_EMSO',"Build EMSO hook libraries", False))
opts.Add(PathOption('LIBDIR',"Location to install library", default_libdir))
opts.Add(PathOption('INCDIR',"Location to install headers", default_incdir))
opts.Add(BoolOption('ENABLE_SAT_P',"Enable saturation curves in terms of pressure"+
	"(introduces some numerical problems in iterative cases if"+
	"you're not careful)", False))
opts.Update(env)
opts.Save('options.cache',env)

Help(opts.GenerateHelpText(env))

if env['ENABLE_SAT_P']:
	env.Append(CPPDEFINES=['ENABLE_SAT_P'])
	
#------------------------------------------------------
# ISNAN DETECTION

#- - - 8< - - -
checknansrc = """// Test for 'isnan'
#include <cmath>
#include <stdexcept>
#include <iostream>
using namespace std;

class not_an_error : public exception{
	// nothing
};

int main(void){
	int x= isnan(1);
	return 0;
	/*
	try{
		if(isnan(1)){
			throw runtime_error("Invalid isnan result");
		}
		int x = 0/(1+1-1-1);
		if(isnan(x)){
			throw not_an_error();
		}
		throw runtime_error("Failed to detect nan");
	}catch(runtime_error E){
		cerr << E.what() << endl;
		return 1;
	}catch(not_an_error E){
		return 0;
	}catch(...){
		cerr << "UNCAUGHT" << endl;
	return 0;
	*/
}
#ifdef __MINGW32__
# error "MINGW32 isnan is no good"
#endif
"""
#- - - 8< - - -

def CheckIsNan(ctxt):

    ctxt.Message( 'Checking for isnan...' )
    lastLIBS = ctxt.env['LIBS']
    lastCPPFLAGS = ctxt.env['CPPFLAGS']
    ctxt.env.Append(
    	LIBS = ['m']
#	    	, CPPFLAGS = ['-fsignaling-nans']
    )
    tuple = ctxt.TryRun(checknansrc,'.cxx')
    
    if not tuple[0]:
        ctxt.env.Replace(
        	LIBS = lastLIBS
        	, CPPFLAGS = lastCPPFLAGS
        )
    ctxt.Result(tuple[0])
    return tuple[0]

#------------------------------------------------------
# CONFIGURATION

env.ParseConfig('cppunit-config --libs --cflags')

# Math library...

conf = Configure(env
	, custom_tests = { 'CheckIsNan' : CheckIsNan} 
	, config_h = "config.h"
)

if not conf.CheckLibWithHeader('m', 'math.h', 'C'):
	print 'Did not find libm.a or m.lib, exiting!'
	Exit(1)


if conf.CheckIsNan():
	env.Append(CPPDEFINES=['HAVE_ISNAN'])

# CppUnit...


have_cppunit=True
if not conf.CheckLib('cppunit'):
	print "Can't find CppUnit!"
	have_cppunit=False

env = conf.Finish()

#------------------------------------------------------
# BUILD THE STATIC LIBRARY -- easy :-)


list = Split("""
	exception.cpp steamcalculator.cpp state.cpp region1.cpp region2.cpp 
	region3.cpp region4.cpp boundaries.cpp steamcalculatorexception.cpp zeroin.cpp 
	designbycontract.cpp units.cpp solver.cpp steamproperty.cpp satcurve.cpp b23curve.cpp 
	b13curve.cpp convergencetest.cpp solver2.cpp iapws95.cpp
""")

lib = env.Library('freesteam',list)

examplesrc = Split("example.cpp")

env.Program('example.cpp'
	, LIBS = ['freesteam']
	, LIBPATH='.'
)


#env.Program('testnan',['testnan.cpp']
#	, LIBS = 'm'
#	, CPPFLAGS = '-fsignaling-nans'
#)

#------------------------------------------------------
# SUBDIRECTORIES....

# Testing with CppUnit...

if have_cppunit:
	env.SConscript(['test/SConscript'],'env have_cppunit') #, 'cli/SConscript'
else:
	print "Skipping... Tests (no CppUnit found)"

# Command-line-interface programs

env.SConscript(['cli/SConscript'],'env')

# EMSO hooks

if env['HAVE_EMSO']:
	env.SConscript(['emso/SConscript'],'env')
else:
	print "Skipping... EMSO hook libraries"

#------------------------------------------------------
# INSTALLATION

install_lib = env.Install("$LIBDIR", lib)

import glob
files = glob.glob("*.h")
#print files

install_inc = env.Install("$INCDIR/freesteam", files)

env.Alias('install',[install_lib, install_inc])
